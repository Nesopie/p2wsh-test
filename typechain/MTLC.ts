/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface MTLCInterface extends Interface {
  getFunction(
    nameOrSignature: "MTLCOrders" | "initiateMint" | "mint" | "token"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Initiated" | "Redeemed"): EventFragment;

  encodeFunctionData(
    functionFragment: "MTLCOrders",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateMint",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "mint", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "MTLCOrders", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
}

export namespace InitiatedEvent {
  export type InputTuple = [
    secretHash: BytesLike,
    initiatedAt: BigNumberish,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    secretHash: string,
    initiatedAt: bigint,
    amount: bigint
  ];
  export interface OutputObject {
    secretHash: string;
    initiatedAt: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RedeemedEvent {
  export type InputTuple = [secrectHash: BytesLike, secret: BytesLike];
  export type OutputTuple = [secrectHash: string, secret: string];
  export interface OutputObject {
    secrectHash: string;
    secret: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MTLC extends BaseContract {
  connect(runner?: ContractRunner | null): MTLC;
  waitForDeployment(): Promise<this>;

  interface: MTLCInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MTLCOrders: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, bigint, boolean] & {
        redeemer: string;
        expiry: bigint;
        initiatedAt: bigint;
        amount: bigint;
        isFulfilled: boolean;
      }
    ],
    "view"
  >;

  initiateMint: TypedContractMethod<
    [
      _redeemer: AddressLike,
      _expiry: BigNumberish,
      _amount: BigNumberish,
      _secretHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  mint: TypedContractMethod<[_secret: BytesLike], [void], "nonpayable">;

  token: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MTLCOrders"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, bigint, bigint, bigint, boolean] & {
        redeemer: string;
        expiry: bigint;
        initiatedAt: bigint;
        amount: bigint;
        isFulfilled: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "initiateMint"
  ): TypedContractMethod<
    [
      _redeemer: AddressLike,
      _expiry: BigNumberish,
      _amount: BigNumberish,
      _secretHash: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<[_secret: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "token"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "Initiated"
  ): TypedContractEvent<
    InitiatedEvent.InputTuple,
    InitiatedEvent.OutputTuple,
    InitiatedEvent.OutputObject
  >;
  getEvent(
    key: "Redeemed"
  ): TypedContractEvent<
    RedeemedEvent.InputTuple,
    RedeemedEvent.OutputTuple,
    RedeemedEvent.OutputObject
  >;

  filters: {
    "Initiated(bytes32,uint256,uint256)": TypedContractEvent<
      InitiatedEvent.InputTuple,
      InitiatedEvent.OutputTuple,
      InitiatedEvent.OutputObject
    >;
    Initiated: TypedContractEvent<
      InitiatedEvent.InputTuple,
      InitiatedEvent.OutputTuple,
      InitiatedEvent.OutputObject
    >;

    "Redeemed(bytes32,bytes)": TypedContractEvent<
      RedeemedEvent.InputTuple,
      RedeemedEvent.OutputTuple,
      RedeemedEvent.OutputObject
    >;
    Redeemed: TypedContractEvent<
      RedeemedEvent.InputTuple,
      RedeemedEvent.OutputTuple,
      RedeemedEvent.OutputObject
    >;
  };
}
