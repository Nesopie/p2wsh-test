/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type BlockHeaderStruct = {
  version: BytesLike;
  timestamp: BytesLike;
  nBits: BytesLike;
  nonce: BytesLike;
  previousBlockHash: BytesLike;
  merkleRootHash: BytesLike;
};

export type BlockHeaderStructOutput = [
  version: string,
  timestamp: string,
  nBits: string,
  nonce: string,
  previousBlockHash: string,
  merkleRootHash: string
] & {
  version: string;
  timestamp: string;
  nBits: string;
  nonce: string;
  previousBlockHash: string;
  merkleRootHash: string;
};

export interface VerifierInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "LDEBlockHash"
      | "blockHeaders"
      | "epoch"
      | "registerBlock"
      | "verifyTxInclusion"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "BlockRegistered"): EventFragment;

  encodeFunctionData(
    functionFragment: "LDEBlockHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blockHeaders",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "epoch", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerBlock",
    values: [BlockHeaderStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyTxInclusion",
    values: [
      BlockHeaderStruct[],
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike[]
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "LDEBlockHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blockHeaders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyTxInclusion",
    data: BytesLike
  ): Result;
}

export namespace BlockRegisteredEvent {
  export type InputTuple = [blockHash: BytesLike];
  export type OutputTuple = [blockHash: string];
  export interface OutputObject {
    blockHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Verifier extends BaseContract {
  connect(runner?: ContractRunner | null): Verifier;
  waitForDeployment(): Promise<this>;

  interface: VerifierInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  LDEBlockHash: TypedContractMethod<[], [string], "view">;

  blockHeaders: TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, string, string, string] & {
        version: string;
        timestamp: string;
        nBits: string;
        nonce: string;
        previousBlockHash: string;
        merkleRootHash: string;
      }
    ],
    "view"
  >;

  epoch: TypedContractMethod<[], [bigint], "view">;

  registerBlock: TypedContractMethod<
    [newEpoch: BlockHeaderStruct[]],
    [void],
    "nonpayable"
  >;

  verifyTxInclusion: TypedContractMethod<
    [
      blockSequence: BlockHeaderStruct[],
      blockIndex: BigNumberish,
      txIndex: BigNumberish,
      txHash: BytesLike,
      proof: BytesLike[]
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "LDEBlockHash"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "blockHeaders"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [string, string, string, string, string, string] & {
        version: string;
        timestamp: string;
        nBits: string;
        nonce: string;
        previousBlockHash: string;
        merkleRootHash: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "epoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "registerBlock"
  ): TypedContractMethod<[newEpoch: BlockHeaderStruct[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "verifyTxInclusion"
  ): TypedContractMethod<
    [
      blockSequence: BlockHeaderStruct[],
      blockIndex: BigNumberish,
      txIndex: BigNumberish,
      txHash: BytesLike,
      proof: BytesLike[]
    ],
    [boolean],
    "view"
  >;

  getEvent(
    key: "BlockRegistered"
  ): TypedContractEvent<
    BlockRegisteredEvent.InputTuple,
    BlockRegisteredEvent.OutputTuple,
    BlockRegisteredEvent.OutputObject
  >;

  filters: {
    "BlockRegistered(bytes32)": TypedContractEvent<
      BlockRegisteredEvent.InputTuple,
      BlockRegisteredEvent.OutputTuple,
      BlockRegisteredEvent.OutputObject
    >;
    BlockRegistered: TypedContractEvent<
      BlockRegisteredEvent.InputTuple,
      BlockRegisteredEvent.OutputTuple,
      BlockRegisteredEvent.OutputObject
    >;
  };
}
