/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { Minter, MinterInterface } from "../Minter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_spvVerifier",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "TxIDS",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "WhitelistedAddresses",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "WhitelistedAddressesArr",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "secretHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "minterBtcAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "userBtcAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "mintTokensTo",
        type: "address",
      },
    ],
    name: "createP2wshSpkForHtlc",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes",
            name: "spk",
            type: "bytes",
          },
          {
            internalType: "uint32",
            name: "amount",
            type: "uint32",
          },
        ],
        internalType: "struct Outpoint[]",
        name: "outpoints",
        type: "tuple[]",
      },
      {
        internalType: "bytes32",
        name: "secretHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "minterBtcAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "userBtcAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "mintTokensTo",
        type: "address",
      },
    ],
    name: "extractMintMetadata",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "getWhiteListedAddresses",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "mtlc",
    outputs: [
      {
        internalType: "contract MTLC",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "txHex",
        type: "bytes",
      },
    ],
    name: "parseTx",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "spk",
            type: "bytes",
          },
          {
            internalType: "uint32",
            name: "amount",
            type: "uint32",
          },
        ],
        internalType: "struct Outpoint[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spk",
        type: "address",
      },
    ],
    name: "register",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes4",
            name: "version",
            type: "bytes4",
          },
          {
            internalType: "bytes4",
            name: "timestamp",
            type: "bytes4",
          },
          {
            internalType: "bytes4",
            name: "nBits",
            type: "bytes4",
          },
          {
            internalType: "bytes4",
            name: "nonce",
            type: "bytes4",
          },
          {
            internalType: "bytes32",
            name: "previousBlockHash",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "merkleRootHash",
            type: "bytes32",
          },
        ],
        internalType: "struct BlockHeader[]",
        name: "blockSequence",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "blockIndex",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "txIndex",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "txHex",
        type: "bytes",
      },
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32",
        name: "secretHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "minterBtcAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "userBtcAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "mintTokensTo",
        type: "address",
      },
    ],
    name: "registerTx",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "spvVerifier",
    outputs: [
      {
        internalType: "contract IVerifySPV",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract TestToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class Minter__factory {
  static readonly abi = _abi;
  static createInterface(): MinterInterface {
    return new Interface(_abi) as MinterInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Minter {
    return new Contract(address, _abi, runner) as unknown as Minter;
  }
}
